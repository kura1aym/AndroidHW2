import kotlin.properties.ReadWriteProperty
import kotlin.reflect.KProperty

open class SmartDevice(val name: String, val category: String) {
    var deviceStatus = "online"
        protected set 
    
    open val deviceType = "unknown"  
    
    open fun turnOn() {
        println("Smart device is turned on.")
    }
    
    open fun turnOff() {
        println("Smart device is turned off.")
    }
    
    fun printDeviceInfo(name: String, category: String, deviceType: String) {
        println("Device name: $name, category: $category, type: $deviceType")
    }
}


class SmartTvDevice(deviceName: String, deviceCategory: String) :
    SmartDevice(name = deviceName, category = deviceCategory) {
    override val deviceType = "Smart TV"           

    private var speakerVolume by RangeRegulator(initialValue = 0, minValue = 0, maxValue = 100)

    private var channelNumber by RangeRegulator(initialValue = 1, minValue = 0, maxValue = 200) 
    
    override fun turnOn() {
        deviceStatus = "on"
        println(
            "$name is turned on. Speaker volume is set to $speakerVolume and channel number is " +
                "set to $channelNumber."
        )
    }

    override fun turnOff() {
        super.turnOff()
        println("$name turned off")
    }
    
    fun increaseSpeakerVolume() {
        speakerVolume++
        println("Speaker volume increased to $speakerVolume.")
    }
    
    fun decreaseVolume() {
        speakerVolume--
        println("Speaker volume decreased to $speakerVolume.")
    }

    fun nextChannel() {
        channelNumber++
        println("Channel number increased to $channelNumber.")
    }  
    
    fun previousChannel() {
        channelNumber--
        println("Channel number decreased to $channelNumber.")
    }  
}
    
class SmartLightDevice(deviceName: String, deviceCategory: String) :
    SmartDevice(name = deviceName, category = deviceCategory) {
	
    override val deviceType = "Smart Light"  
    
    private var brightnessLevel by RangeRegulator(initialValue = 2, minValue = 0, maxValue = 100)
        
    override fun turnOn() {
        deviceStatus = "on"
        brightnessLevel = 2
        println("$name turned on. The brightness level is $brightnessLevel.")
    }

    override fun turnOff() {
        deviceStatus = "off"
        brightnessLevel = 0
        println("Smart Light turned off")
    }    

    fun increaseBrightness() {
        brightnessLevel++
        println("Brightness increased to $brightnessLevel.")
    }
    
    fun decreaseBrightness() {
        brightnessLevel--
        println("Brightness decreased to $brightnessLevel.")
    }
}
    
class SmartHome(
    val smartTvDevice: SmartTvDevice,
    val smartLightDevice: SmartLightDevice
) {
    
    var deviceTurnOnCount = 0
        private set
    
    fun isDeviceOn(device: SmartDevice): Boolean {
        return device.deviceStatus == "on"
    }

    fun turnOnTv() {
            deviceTurnOnCount++
        	smartTvDevice.turnOn()
    }

    fun turnOffTv() {
        if (isDeviceOn(smartTvDevice)) {
            deviceTurnOnCount--
        	smartTvDevice.turnOff()
        }
    }

    fun increaseTvVolume() {
        if (isDeviceOn(smartTvDevice)) {
            smartTvDevice.increaseSpeakerVolume()
        }
    }
    
    fun decreaseTvVolume() {
        if (isDeviceOn(smartTvDevice)) {
            smartTvDevice.decreaseVolume()
        }
    }

    fun changeTvChannelToNext() {
        if (isDeviceOn(smartTvDevice)) {
            smartTvDevice.nextChannel()
        }
    }
    
    fun changeTvChannelToPrevious() {
        if (isDeviceOn(smartTvDevice)) {
            smartTvDevice.previousChannel()
        }
    }
    
    fun turnOnLight() {
        	deviceTurnOnCount++
        	smartLightDevice.turnOn()  
    }

    fun turnOffLight() {
        if (isDeviceOn(smartLightDevice)) {
        	deviceTurnOnCount--
        	smartLightDevice.turnOff()
        }  
    }
    
    fun increaseLightBrightness() {
        if (isDeviceOn(smartLightDevice)) {
            smartLightDevice.increaseBrightness()
        }
    }
    
    fun decreaseLightBrightness() {
        if (isDeviceOn(smartLightDevice)) {
            smartLightDevice.decreaseBrightness()
        }
    }
    
    fun turnOffAllDevices() {
        if (isDeviceOn(smartTvDevice)) {
            deviceTurnOnCount--
        	smartTvDevice.turnOff()
        }
        
        if (isDeviceOn(smartLightDevice)) {
        	deviceTurnOnCount--
        	smartLightDevice.turnOff()
        }    
    }
    
    fun printSmartTvInfo() {
		smartTvDevice.printDeviceInfo(smartTvDevice.name, smartTvDevice.category, smartTvDevice.deviceType)
    }
    
    fun printSmartLightInfo() {
		smartLightDevice.printDeviceInfo(smartLightDevice.name, smartLightDevice.category, smartLightDevice.deviceType)
    }
    
}  

class RangeRegulator(
    initialValue: Int,
    private val minValue: Int,
    private val maxValue: Int
) : ReadWriteProperty<Any?, Int> {
    var fieldData = initialValue

    override fun getValue(thisRef: Any?, property: KProperty<*>): Int {
        return fieldData
    }

    override fun setValue(thisRef: Any?, property: KProperty<*>, value: Int) {
        if (value in minValue..maxValue) {
            fieldData = value
        }
    }
}
    
fun main() {
    val smartHome = SmartHome(
        SmartTvDevice(deviceName = "Android TV", deviceCategory = "Entertainment"),
        SmartLightDevice(deviceName = "Google light", deviceCategory = "Utility")
    )

    println("Total number of devices currently turned on: ${smartHome.deviceTurnOnCount}")

    smartHome.turnOnTv()

    println("Total number of devices currently turned on: ${smartHome.deviceTurnOnCount}")
    println("TV status: ${smartHome.smartTvDevice.deviceStatus}")

    smartHome.increaseTvVolume()

    smartHome.turnOnLight()

    println("Total number of devices currently turned on: ${smartHome.deviceTurnOnCount}")
    println("Light status: ${smartHome.smartLightDevice.deviceStatus}")

    smartHome.increaseTvVolume()


    smartHome.changeTvChannelToNext()

    smartHome.increaseLightBrightness()
    
    smartHome.decreaseTvVolume()
    
    smartHome.changeTvChannelToPrevious()
    
    smartHome.printSmartTvInfo()
    
    smartHome.printSmartLightInfo()
    
    smartHome.decreaseLightBrightness()
    
    smartHome.turnOffAllDevices()

    println("Total number of devices currently turned on: ${smartHome.deviceTurnOnCount}")
}

